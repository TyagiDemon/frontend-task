import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import axios from "axios";

export default function Home({ user }) {
  const [tabId, setTabId] = useState(0);
  const [showData, setShowData] = useState(null);
  const [data, setData] = useState(null);
  const [filterData, setFilterData] = useState(null);
  const [isShowDD, setShowDD] = useState(false);
  const [pastRidesCount, setPastRidesCount] = useState(0);
  const [upcomingRidesCount, setUpcomingRidesCount] = useState(0);
  const [filterState, setFilterState] = useState("none");
  const [filterCity, setFilterCity] = useState("none");
  const [location, setLocation] = useState({});

  useEffect(() => {
    axios.get("https://assessment.api.vweb.app/rides").then((res) => {
      let pastRides = 0;
      res.data.map((ride) => {
        const today = new Date();
        const rideDate = new Date(ride.date);
        if (today > rideDate) pastRides += 1;
      });

      setPastRidesCount(pastRides);
      setUpcomingRidesCount(res.data.length - pastRides);

      let newData = res.data.map((ride) => {
        ride.station_path.unshift(ride.origin_station_code);
        ride.station_path.push(ride.destination_station_code);
        let distance = Math.min(
          ...ride.station_path.map((v) =>
            Math.abs(v - (user?.station_code || 50))
          )
        );
        ride.distance = distance;
        return ride;
      });

      setData(newData);
      setFilterData(newData);

      let newLocation = {};
      newData.map((ride) => {
        if (!newLocation[ride.state]) newLocation[ride.state] = [];
        if (!newLocation[ride.state].includes(ride.city))
          newLocation[ride.state].push(ride.city);
      });

      setLocation(newLocation);
    });
  }, [user]);

  useEffect(() => {
    if (!filterData) return;

    let newData = filterData;
    if (tabId === 0) {
      newData.sort((a, b) => {
        const x = a.distance;
        const y = b.distance;
        return x < y ? -1 : x > y ? 1 : 0;
      });
    } else if (tabId === 1) {
      const today = new Date();
      newData = newData
        .filter((ride) => {
          const date = new Date(ride.date);
          return date > today;
        })
        .sort((a, b) => {
          const x = new Date(a.date);
          const y = new Date(b.date);
          return x < y ? -1 : x > y ? 1 : 0;
        });
    } else if (tabId === 2) {
      const today = new Date();
      newData = newData
        .filter((ride) => {
          const date = new Date(ride.date);
          return date < today;
        })
        .sort((a, b) => {
          const x = new Date(a.date);
          const y = new Date(b.date);
          return x < y ? 1 : x > y ? -1 : 0;
        });
    }

    setShowData(newData);
  }, [filterData, tabId]);

  return (
    <div className="bg-neutral-700 text-white min-h-screen">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="px-8">
        <div className="py-6 flex justify-between sticky top-20 bg-neutral-700 z-10">
          <div className="flex text-lg gap-x-10">
            <div
              className={`${
                tabId === 0 ? "font-semibold border-b-2" : "text-gray-300"
              } cursor-pointer`}
              onClick={() => setTabId(0)}
            >
              Nearest rides
            </div>
            <div
              className={`${
                tabId === 1 ? "font-semibold border-b-2" : "text-gray-300"
              } cursor-pointer`}
              onClick={() => setTabId(1)}
            >{`Upcoming rides (${upcomingRidesCount})`}</div>
            <div
              className={`${
                tabId === 2 ? "font-semibold border-b-2" : "text-gray-300"
              } cursor-pointer`}
              onClick={() => setTabId(2)}
            >{`Past rides (${pastRidesCount})`}</div>
          </div>
          <div
            className="flex gap-x-2 cursor-pointer hover:bg-neutral-800 px-2 py-1 rounded-md"
            onClick={() => setShowDD(!isShowDD)}
          >
            <div>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth={2}
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M4 6h16M4 12h16M4 18h7"
                />
              </svg>
            </div>
            <div>Filters</div>
          </div>
          {isShowDD && (
            <div className="bg-stone-900 px-6 py-3 w-52 absolute right-0 top-16 rounded-xl">
              <div className="p-2 border-b-2 text-gray-400 border-gray-400">
                Filters
              </div>
              <div>
                <form className="pt-5 pb-2">
                  <select
                    name="state"
                    id="state"
                    className="bg-neutral-700 w-full p-1 mb-3 rounded-md"
                    onChange={(e) => {
                      setFilterState(e.target.value);
                      setFilterData(
                        data.filter(
                          (v) =>
                            e.target.value === "none" ||
                            e.target.value === v.state
                        )
                      );
                    }}
                  >
                    <option value="none">All States</option>
                    {Object.keys(location)
                      .sort()
                      .map((key) => (
                        <option value={key} key={key}>
                          {key}
                        </option>
                      ))}
                  </select>
                  <select
                    name="city"
                    id="city"
                    className="bg-neutral-700 w-full p-1 rounded-md"
                    onChange={(e) => {
                      setFilterCity(e.target.value);
                      setFilterData(
                        data.filter((v) => {
                          if (e.target.value === "none")
                            return (
                              filterState === "none" || filterState === v.state
                            );

                          return e.target.value === v.city;
                        })
                      );
                    }}
                  >
                    <option value="none">All Cities</option>
                    {location[filterState]?.sort().map((city) => (
                      <option value={city} key={city}>
                        {city}
                      </option>
                    ))}
                  </select>
                </form>
              </div>
              <div></div>
            </div>
          )}
        </div>
        <div className="pt-20 pb-6">
          {showData &&
            showData.map((ride, key) => (
              <div
                key={key}
                className="my-3 px-7 py-6 flex rounded-xl bg-stone-800"
              >
                <div>
                  <div className="bg-neutral-700 h-36 w-64 rounded-md">
                    <Image
                      src={ride.map_url}
                      alt="map"
                      height={144}
                      width={256}
                      className="rounded-md z-0"
                    />
                  </div>
                </div>
                <div className="flex-1 pl-8 text-lg">
                  <div>Ride Id: {ride.id}</div>
                  <div>Origin Station: {ride.origin_station_code}</div>
                  <div>Station Path: {`[${ride.station_path}]`}</div>
                  <div>Date: {ride.date}</div>
                  <div>Distance: {ride.distance}</div>
                </div>
                <div className="flex gap-x-4 text-xs">
                  <div className="bg-stone-900 h-fit px-3 py-1 rounded-full">
                    {ride.city}
                  </div>
                  <div className="bg-stone-900 h-fit px-3 py-1 rounded-full">
                    {ride.state}
                  </div>
                </div>
              </div>
            ))}
        </div>
      </div>
    </div>
  );
}
